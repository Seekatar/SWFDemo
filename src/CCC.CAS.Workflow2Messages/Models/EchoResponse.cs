#pragma warning disable CA1834 // Consider using 'StringBuilder.Append(char)' when applicable
#nullable disable
/*
 * Workflow2Service
 *
 * API Supporting the Workflow2 App
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@aisreview.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.Runtime.Serialization;
using System.Text.Json;

namespace CCC.CAS.Workflow2Messages.Models
{
    /// <summary>
    /// Response Echo call
    /// </summary>
    [DataContract]
    public partial class EchoResponse : IEquatable<EchoResponse>
    {
        /// <summary>
        /// Gets or Sets Parm
        /// </summary>
        [DataMember(Name="parm")]
        public EchoResponseParm Parm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EchoResponse {\n");
            sb.Append("  Parm: ").Append(Parm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EchoResponse)obj);
        }

        /// <summary>
        /// Returns true if EchoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EchoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EchoResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Parm == other.Parm ||
                    Parm != null &&
                    Parm.Equals(other.Parm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Parm != null)
                    hashCode = hashCode * 59 + Parm.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EchoResponse left, EchoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EchoResponse left, EchoResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

#pragma warning restore CA1834 // Consider using 'StringBuilder.Append(char)' when applicable

