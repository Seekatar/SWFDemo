#nullable disable
/*
 * Workflow2Service
 *
 * API Supporting the Workflow2 App
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: myemail@aisreview.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text.Json;

namespace CCC.CAS.Workflow2Messages.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class EchoResponseParm : IEquatable<EchoResponseParm>
    {
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [Required]
        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]
        [DataMember(Name = "name")]
        public string Name { get; set;}

        /// <summary>
        /// Connection name
        /// </summary>
        /// <value>Connection name</value>
        [Required]
        [DataMember(Name="client")]
        public string Client { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EchoResponseParm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Client: ").Append(Client).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EchoResponseParm)obj);
        }

        /// <summary>
        /// Returns true if EchoResponseParm instances are equal
        /// </summary>
        /// <param name="other">Instance of EchoResponseParm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EchoResponseParm other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    Client == other.Client ||
                    Client != null &&
                    Client.Equals(other.Client)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Client != null)
                    hashCode = hashCode * 59 + Client.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

        public static bool operator ==(EchoResponseParm left, EchoResponseParm right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EchoResponseParm left, EchoResponseParm right)
        {
            return !Equals(left, right);
        }

        #endregion Operators
    }
}


